mt0 <- mtcars[mtcars["am"] == 0,-9]
head(mt0)
mt0 <- mtcars[mtcars["am"] == 0,-"am"]
mt0 <- mtcars[mtcars["am"] == 0, !"am"]
mt0 <- mtcars[mtcars["am"] == 0, -9]
mt1 <- mtcars[mtcars["am"] == 1, -9]
View(mt0)
View(mt1)
mpg0.all <- lm(mpg ~ ., data=mt0)
par(mfrow)
par("mfrow")
par(mfrow='')
par(mfrow=default)
par(mfrow=Null)
NULL
par(mfrow=NULL)
plot(mpg0)
plot(mpg0.all)
par(mfrow=(1,1))
par(mfrow=c(1,1))
plot(mpg0.all)
with(mt0, plot(1:nrow(mt0, mpg)))
with(mt0, plot(1:nrow(mt0), mpg))
abline(mpg0.all)
class(mpg0.all)
abline(mpg0.all)
?abline
mpg0.all <- lm(mpg ~ ., data=mt0)
abline(mpg0.all <- lm(mpg ~ ., data=mt0))
summary(mpg0.all)
with(mt0, plot(cyl, mpg))
with(mt0, plot(disp, mpg))
disp0.lm(mpg ~ disp, data = mt0)
disp0.lm <- lm(mpg ~ disp, data = mt0)
abline(disp0.lm)
summary(disp0.lm)
disp.cyl <- lm(disp ~ cil, data = mt0)
disp.cyl <- lm(disp ~ cyl, data = mt0)
summary(disp.cyl)
abline(disp.cyl)
plot.new()
abline(disp.cyl)
plot(cyl, disp)
plot(mt0$cyl, mt0$disp)
abline(disp.cyl)
disp.cyl.ratio <- with(mt0, disp / cyl)
disp.cyl.ratio
plot(1:nrow(mt0), disp.cyl.ratio))
plot(1:nrow(mt0), disp.cyl.ratio)
?plot
save.image("C:/Users/AAB330/Google Drive 2/Training/DataScience/RegressionModels/CourseProject/env.RData")
?I
lm(gpm ~ wt + hp.wt + qsec + am, data = mtcars2
)
source('~/.active-rstudio-document', echo=TRUE)
View(mtcars2)
mtcars2["gpm"] <- 100 / mtcars2$mpg
dsprr(lm(gpm ~ wt + hp.wt + qsec + am, data = mtcars2))
summary(lm(gpm ~ wt + hp.wt + qsec + am, data = mtcars2))$coefficients
plot.new()
par(mfrow=c(1,4))
plot(gpm.best)
source('~/.active-rstudio-document', echo=TRUE)
plot.new()
par(mfrow=c(1,4))
plot(gpm.best)
attach(mtcars)
View(mtcars)
save.image("C:/Users/AAB330/Google Drive 2/Training/DataScience/RegressionModels/CourseProject/.RData")
?dev
??dev
?pdf
plot.new()
par(mfrow=c(1,4))
plot(mpg.best)
library("knitr", lib.loc="~/R/win-library/3.0")
library("markdown", lib.loc="~/R/win-library/3.0")
library("yaml", lib.loc="~/R/win-library/3.0")
library("grDevices", lib.loc="C:/Program Files/R/R-3.0.3/library")
library(usingR)
library(UsingR)
??UsingR
install.packages("usingr")
install.packages("C:/Users/AAB330/Downloads/UsingR_2.0-1.zip", repos = NULL)
library("UsingR", lib.loc="~/R/win-library/3.0")
install.packages("C:/Users/AAB330/Downloads/HistData_0.7-5.zip", repos = NULL)
library("UsingR", lib.loc="~/R/win-library/3.0")
install.packages("C:/Users/AAB330/Downloads/Hmisc_3.14-4.zip", repos = NULL)
library(UsingR)
install.packages("C:/Users/AAB330/Downloads/Formula_1.1-2.zip", repos = NULL)
library(UsingR)
data(father.son)
library("UsingR", lib.loc="~/R/win-library/3.0")
install.packages("C:/Users/AAB330/Downloads/latticeExtra_0.6-26.zip", repos = NULL)
library("UsingR", lib.loc="~/R/win-library/3.0")
install.packages("http://cran.r-project.org/web/packages/UsingR/index.html")
install.packages("C:/Users/AAB330/Downloads/aplpack_1.2.9.zip", repos = NULL)
install.packages("C:/Users/AAB330/Downloads/quantreg_5.05.zip", repos = NULL)
library("UsingR", lib.loc="~/R/win-library/3.0")
install.packages("C:/Users/AAB330/Downloads/SparseM_1.05.zip", repos = NULL)
library("UsingR", lib.loc="~/R/win-library/3.0")
data(father.son)
?data
View(father.son)
colnames(father.son)
colnames(father.son) <- c("fh", "sh")
View(father.son)
with(father.son, t.test(sh-fh))
with(father.son, t.test(fh-sh))
with(father.son, mean(fh-sh))
hist(fh-sh)
with(father.sorn,hist(fh-sh)
)
with(father.son,hist(fh-sh))
?abline
?abline(v=mean(father.son$fh-father.son$sh))
abline(v=mean(father.son$fh-father.son$sh))
abline(v=mean(father.son$fh-father.son$sh),color='red')
abline(v=mean(father.son$fh-father.son$sh),col='red')
par(col)
par('col')
par(col='red')
par(lw=2)
par(col='blue')
abline(v=c(-1.1629160 -0.8310296))
abline(v=-0.8310296)
title(main="Father's height - Son's height")
plot.new
plot.new()
ttest <- with(father.son, ttest(sh-fh))
tfs <- with(father.son, t.test(sh-fh))
tfs
tfs[1]
tfs[2]
str(tfs)
tfs$conf.int
tfs$conf.int[1]
tfs$conf.int[2]
tfs$estimate
with(father.son,plot(fh-sh, type=n)
par(col='red')
title(main="Father's height - Son's height")
with(father.son,plot((fh-sh), type=n)
)
with(father.son,plot((fh-sh), type='n')
)
title(main="Father's height - Son's height")
plot.new()
with(father.son,plot((fh-sh), type='n')
title(main="Father's height - Son's height")
with(father.sorn,hist(fh-sh)
plot.new()
with(father.son,plot((fh-sh), type='n')
title(main="Father's height - Son's height")
with(father.son,hist(fh-sh)
)
plot.new()
with(father.son,plot((fh-sh), type='n')
title(main="Father's height - Son's height")
with(father.son,plot((fh-sh), type='h')
par(col='red')
plot.new()
with(father.son,plot((fh-sh), type='n')
title(main="Father's height - Son's height")
with(father.son,plot((fh-sh), type='h'))
par(col='red')
with(father.son,plot((fh-sh), type='h', breaks=10))
plot.new()
tit <- "Father's height - Son's height"
with(father.son, hist((fh-sh), type='n', main=tit)
)
par(col='red')
abline(v=tfs$conf.int[1])
abline(v=tfs$conf.int[2])
par(col='blue')
abline(v=tfs$estimate)
library("UsingR", lib.loc="~/R/win-library/3.0")
data(father.son)
colnames(father.son) <- c("fh", "sh")
tfs <- with(father.son, t.test(sh-fh))
plot.new()
tit <- "Son's height - Father's height"
with(father.son, hist((fh-sh), type='n', main=tit))
par(col='red')
abline(v=tfs$conf.int[1])
abline(v=tfs$conf.int[2])
par(col='blue')
abline(v=tfs$estimate)
library("UsingR", lib.loc="~/R/win-library/3.0")
data(father.son)
colnames(father.son) <- c("fh", "sh")
tfs <- with(father.son, t.test(sh-fh))
plot.new()
tit <- "Son's height - Father's height"
with(father.son, hist((sh-fh), type='n', main=tit))
par(col='red')
abline(v=tfs$conf.int[1])
abline(v=tfs$conf.int[2])
par(col='blue')
abline(v=tfs$estimate)
save.image("C:/Users/AAB330/Google Drive 2/Training/DataScience/StatisticalInference/W3/env.RData")
library(datasets)
data(mtcars)
fmpg <- lm(mpg ~ wt, mtcars)
fmpg
summary(fmpg)
?deviance
deviance(fmpg$residuals)
str(fmpg)
fmpg$residuals
deviance(fmpg$residuals)
class(fmpg$residuals)
class(fmpg$residuals)[1]
class(fmpg$residuals)[1][1]
fmpg$residuals[1]
summary(fmpg)
summary(fmpg)$residuals
deviance(summary(fmpg)$residuals)
summary(fmpg)$residuals
summary(fmpg)
exp(1)
?confint
confint.robust <- function (object, parm, level = 0.95, ...)
{
cf <- coef(object)
pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a <- (1 - level)/2
a <- c(a, 1 - a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,
pct))
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
swirl
swirl()
library("swirl", lib.loc="~/R/win-library/3.0")
swirl()
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(Fertility ~ Agriculture, swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination +Infant.Mortality, swiss))[2])
print(cf)
}
makelms()
ec <- with(swiss, Examination + Catholic)
sc
ec
info()
play()
ec2 <- ec
ec <- swiss$Examination+swiss$Catholic
ec == ec2
all.equal(ec, ec2)
nxt()
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit$coef - all$coef
all$coefficients-efit$coefficients
View(ravenData)
mdl <- glm(ravenWinNum, reavenScore, family='binomial', ravenData)
mdl <- glm(ravenWinNum, ravenScore, family='binomial', ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family='binomial', ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds) / (1 + exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fitno) - coef(fit)
coef(fit) - coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
sigma <- sqrt(deviance(fit)/length(fit$residuals))
play()
df.residual(fit)
length(fit$residuals)
sigma <- sqrt(deviance(fit)/(length(fit$residuals)-2)
)
sigma
sqrt(deviance(fit)/df.residual(fit))
nxt()
sqrt(deviance(fit)/df.residual(fit))
sigma<- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit) / (sigma*sqrt(1-hatvalues(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(dev(fitno$residuals) / fitno$df.residuals))
sigma1 <- sqrt(dev(fitno$residuals) / fitno$df.residuals)
sigma1 <- sqrt(deviance(fitno$residuals) / fitno$df.residuals)
sigma1 <- sqrt(dev(fitno$residuals) / df.residual(fitno)))
sigma1 <- sqrt(dev(fitno$residuals) / df.residual(fitno))
sigma1 <- sqrt(deviance(fitno$residuals) / df.residual(fitno))
sigma1 <- sqrt(deviance(fitno$residuals) / df.residual(fitno))
nxt()
sigma1<- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1] / (sigma1 * sqrt(1-hatvalues(fit)[1]))
View(rstudent(fit))
play()
out2
nxt()
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy ^ 2) / 2 * sigma ^ 2
sum(dy ^ 2) / (2 * sigma ^ 2)
plot(fit, which=5)
?ifelse
library("caret", lib.loc="~/R/win-library/3.0")
library(caret)
library(kernlab)
data(spam)
View(spam)
?createDataPartition
str(spam$type)
inTrain <- createDataPartition(spam$type, 0.75)
inTrain <- createDataPartition(spam$type, p=0.75)
Training <- spam(inTrain,)
Training <- spam[inTrain,]
inTrain$Resample1[1:10]
inTrain <- createDataPartition(spam$type, p=0.75, list=F)
Training <- spam[inTrain,]
Test <- spam[-inTrain,]
testing <- Test
training <- Training
rm(Training)
rm(test)
rm(Test)
View(training)
?train
set.seed(32343)
mdl <- train(type ~ ., data=training, method="glm")
mdl$Accuracy
mdl$modelInfo$parameters
mdl
mdl$finalModel
mdl$finalModel$R
predictions <- predict(mdl, newdata=testing)
predictions[1:10]
?confusionMatrix
confusionMatrix(predictions, testing$type)
library(caret)
library(kernlab)
data(spam)
View(spam)
training <- createDataPartition(y=spam$type, p=.75, list=F)
training <- spam[createDataPartition(y=spam$type, p=.75, list=F),]
View(training)
training[row.names]
training[row.names,]
training$row.names[1:10]
train <- createDataPartition(y=spam$type, p=.75, list=F)
training <- spam[train,]
testing <- spam[-train,]
View(testiing)
View(testing)
set.seed(32323)
?createFolds
4140/4601
4141 / 4601
rm(training)
rm(testing)
folds <- createFolds(y = spam$type,k = 10,list = T,returnTrain = T)
fold01
folds$fold01
folds$Fold01
sapply(X = folds,FUN = length)
sum(sapply(X = folds,FUN = length))
sum(sapply(X = folds,FUN = length))/10
sum(sapply(X = folds,FUN = length))/length(folds)
set.seed(32323)
folds <- createFolds(y = spam$type, k = 10,returnTrain = F)
sum(sapply(X = folds,FUN = length))/length(folds)
4140.9 + 460.1
library(ISLR)
library(islr)
??islr
install.packages("C:/Users/AAB330/Downloads/ISLR_1.0.zip", repos = NULL)
library(islr)
library(ISLR)
data(wages)
?ISLR
data(Wage)
View(Wage)
summary(Wage)
library(Hmisc)
?cut2
?all.equal
install.packages("rtools")
??version
??session
sessionInfo
R,version()
R.version()
sessionInfo()
library("tools", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("devtools", lib.loc="~/R/win-library/3.0")
pwd()
dir()
R.version()
sessionInfo()
install.packages("rtools")
library("manipulate", lib.loc="~/R/win-library/3.0")
source('~/.active-rstudio-document', echo=TRUE)
library("ElemStatLearn", lib.loc="~/R/win-library/3.0")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
manipulate(myHist(mu), mu = slider(62, 74))
data(galton)
source('~/.active-rstudio-document', echo=TRUE)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
hist(galton$child,col="blue",breaks=100)
mu = 63
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
?lines
lines(c(mu, mu), c(0, 75),col="red",lwd=5)
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 75),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
mse
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
manipulate(myHist(mu), mu = slider(62, 74))
manipulate(myHist(mu), mu = slider(62, 74))
## Not run:
## Create a plot with a slider
manipulate(plot(1:x), x = slider(5, 10))
## Use multiple sliders
manipulate(
plot(cars, xlim = c(x.min, x.max)),
x.min = slider(0,15),
x.max = slider(15,30))
require(devtools)
install_github('rCharts', 'ramnathv')
library("rCharts", lib.loc="~/R/win-library/3.0")
demo()
?demo
demo(package=rCharts)
demo(package="rCharts")
demo(datatables, package="rCharts")
demo(dimple, rCharts)
demo(dimple, package="rCharts")
install.packages(rjson)
install.packages("rjson")
demo(dimple, package="rCharts")
install.packages("googleVis")
demo(package="googleVis")
demo(AnimateGeoMap, package="googleVis")
demo(AnimatedGeoMap, package="googleVis")
library("googleVis", lib.loc="~/R/win-library/3.0")
demo(AnimatedGeoMap, package="googleVis")
demo(EventListener, package="googleVis")
demo(Roles, package="googleVis")
demo(googleVis, package="googleVis")
shiny::runApp('C:/Users/AAB330/Google Drive 2/Training/DataScience/DevelopingDataProducts/Q1')
library("shiny", lib.loc="~/R/win-library/3.0")
detach("package:shiny", unload=TRUE)
shiny::runApp('C:/Users/AAB330/Google Drive 2/Training/DataScience/DevelopingDataProducts/Q1')
shiny::runApp('C:/Users/AAB330/Google Drive 2/Training/DataScience/DevelopingDataProducts/Q1')
library(slidify)
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
setwd("C:/Users/AAB330/Google Drive 2/Training/DataScience/DevelopingDataProducts/CoPj")
setwd("./bmiDeck/")
author("bmi")
dir()
unit.conv <- function(weight, height, units) {
# coverts weight, height according to units vector
if (units[1] == 2){
weight <- weight * 0.453592
}
if (units[2] == 2) {
height <- height * 2.54
}
c(weight, height)
}
bmiCalc <- function(weight, height, units) {
# computes BMI in kg/m2
wh <- unit.conv(weight, height, units)
return((wh[1] / wh[2]^2) * 10000)
}
bmiCalc(176, 180, c(2,1))
